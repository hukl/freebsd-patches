#!/bin/sh
# Copyright Philipp Wuensche

usage='Usage: zfs-tm -f <configfile>'

while getopts :f: arg; do
 case ${arg} in
  f) zfs_tm_conf=$OPTARG;;
  *) echo $usage && exit
 esac
done

[ -f "${zfs_tm_conf}" ] && . "${zfs_tm_conf}"
[ "${zfs_tm_conf}" = "" ] && echo $usage && exit
[ "${my_zfs}" = "" ] && echo $usage && exit
[ "${my_backuppool}" = "" ] && echo $usage && exit

my_mark="${my_backuppool}/${my_zfs}_backupmark"

# We make really sure our backup zpool is reachable and exists
if [ ! `zpool list -H -o name|grep $my_backuppool` ]; then
   zpool import $my_backuppool
   if [ ! `zpool list -H -o name|grep $my_backuppool` ]; then
      echo "ERROR: Backup Pool could not be attached"
      exit
   fi
fi

# This is the latest snapshot in our backup zpool, we determin its name by looking at the origin of a clone-filesystem we created
latest_snapshot_backup=`zfs list -H -o origin $my_mark | cut -d '@' -f2`
# This is the latest snapshot in our zpool
latest_snapshot=`zfs list -H -o name -t snapshot -r $my_zfs|tail -n1`

# If both zpools have the same time-stamp, the backup is up-to-date and we can stop here
if [ "${my_zfs}@$latest_snapshot_backup" = "$latest_snapshot" ]; then
	zpool export $my_backuppool
	echo "Backup up-to-date!"
	exit
fi

echo -n "Copying incremental backup from ${my_zfs}@$latest_snapshot_backup till $latest_snapshot"

# make sure the backup is where we left it and noone has edited any data
zfs rollback $my_backuppool/${my_zfs}@${latest_snapshot_backup}

# send the incremental snapshot-stream
zfs send -I $latest_snapshot_backup $latest_snapshot |zfs recv $my_backuppool/$my_zfs

if [ `zfs get -H name $my_backuppool/${latest_snapshot} |wc -m` -gt 0 ]; then
   # If the latest snapshot on our zpool now exists on our backup-zpool the backup was a success
   echo " - Success"
   # We destroy the clone-filesystem that marks our backup state and set our mark with creating a new clone-filesystem
   zfs destroy $my_mark
   zfs clone $my_backuppool/$latest_snapshot $my_mark
else
   # If the latest snapshot does not exist on our backup-zpool, we should 
   # make the latest snapshot we have our new mark a do a rollback
   echo " - Fail"
   latest_existing_backup=`zfs list -H -o name -t snapshot -r $my_backuppool/$my_zfs|tail -n1`
   echo "Doing rollback of backup to $latest_existing_backup"
   zfs rollback ${latest_existing_backup}
fi

# export the pool so the blockdevice it is located on can vanish
zpool export $my_backuppool
